**********************************************************************
Name: Daniel Noyes
Prog: LAB8
grad: 85
user: dnoyes
Due: 4/27/2012 11:59:59 PM
Graded: 5/11/2012 2:45:12 PM
ece161lab8.cpp Submitted: 4/28/2012 1:53:19 AM
Late by:1 days
Comments: None
ece161lab8.cpp
** start file ********************************************************
/*   1*/ /* ECE161lab8 project
/*   2*/ I, Daniel Noyes, certify that this is my own work and I have not collaborated with anyone else.
/*   3*/ I encourage the use of this program as OPEN SOURCE.
/*   4*/ 
/*   5*/ */
/*   6*/ 
/*   7*/ //stops the secure warnings
/*   8*/ #define _CRT_SECURE_NO_WARNINGS
/*   9*/ 
/*  10*/ //grabs the standard input output library
/*  11*/ #include <stdio.h>
/*  12*/ 
/*  13*/ //grabs the standard library
/*  14*/ #include <stdlib.h>
/*  15*/ 
/*  16*/ //grabs the string library
/*  17*/ #include <string.h>
/*  18*/ 
/*  19*/ //Head structure which points to the data
/*  20*/ typedef struct Head
/*  21*/ {
/*  22*/ 	//point to the top of the list
/*  23*/ 	struct Node *linkp;
/*  24*/ } NODE;
/*  25*/ 
/*  26*/ //test structure that holds the score for each student
/*  27*/ typedef struct test
/*  28*/ {
/*  29*/ 	//integer that holds the test score
/*  30*/ 	int score;
/*  31*/ 
/*  32*/ 	//pointer that points down to the next score for the student
/*  33*/ 	struct test *link;
/*  34*/ }	TEST;
/*  35*/ 
/*  36*/ //student structure that holds the student main data
/*  37*/ typedef struct student
/*  38*/ {
/*  39*/ 	//character holder for each student name
/*  40*/ 	char name[50];
/*  41*/ 
/*  42*/ 	//pointer that points to the next student
/*  43*/ 	struct student *NextStu;
/*  44*/ 
/*  45*/ 	//pointer that points to the test scores
/*  46*/ 	struct test *pScore;
/*  47*/ }	STUDENT;
/*  48*/ 
/*  49*/ //searches through the student list to find where it can be inserted in order
/*  50*/ bool SearchStuList (STUDENT *Head, STUDENT **pPrev, STUDENT **pCurrent, char *name);
/*  51*/ 
/*  52*/ //Insert the Student data to the main list
/*  53*/ STUDENT *InsertStudent (STUDENT *Head, STUDENT *pPrev, char *name, int NumScores);
/*  54*/ 
/*  55*/ //Insert the scores for each individual students
/*  56*/ TEST InsertScore(STUDENT *pNew,TEST **Current, int InScore);
/*  57*/ 
/*  58*/ //Prints out the students and the scores to the screen
/*  59*/ void PrintList(STUDENT *Head);
/*  60*/ 
/*  61*/ //main Program
/*  62*/ int main(void)
/*  63*/ {
/*  64*/ 	//set the pointer to the start of the students
/*  65*/ 	STUDENT *start = NULL;
/*  66*/ 
/*  67*/ 	//set pointer to the prevous and current stack
/*  68*/ 	STUDENT *pPrev, *pCurrent;
/*  69*/ 
/*  70*/ 	//set a temp holder that will hold the amount of scores for each student
/*  71*/ 	int score;
/*  72*/ 
/*  73*/ 	//set a temp name holder for student
/*  74*/ 	char tmpName[50];
/*  75*/ 
/*  76*/ 	//this is used to skip the first line in the student text file which is garbarge data
/*  77*/ 	char Gar[200];
/*  78*/ 
/*  79*/ 	//set the variable for input and output file
/*  80*/ 	FILE *DATA;
/*  81*/ 
/*  82*/ 	//set the input file and check to see if it is there (student_data_x.txt)
/*  83*/ 	if ((DATA=fopen("student_data_x.txt","rt")) == NULL)
/*  84*/ 	{
/*  85*/ 
/*  86*/ 		//display student_data_x.txt not found
/*  87*/ 		printf("Sorry Could not find the File\nIt might have ran away from you!\nmake sure it is in the same directory as me(Program)");
/*  88*/ 
/*  89*/ 		//exit the program with a "EXIT_FAILURE"
/*  90*/ 		exit(0);
/*  91*/ 	}
/*  92*/ 
/*  93*/ 	//skip the first line of the student_data_x.txt with fgets since it displays the header for the text file
/*  94*/ 	fgets(Gar,200,DATA);
/*  95*/ 
/*  96*/ 	//grabs the needed data from the student_data_x.txt file
/*  97*/ 	while(fscanf(DATA,"%s %d",tmpName,&score) == 2)
/*  98*/ 	{
/*  99*/ 
/* 100*/ 		//Search through the student list to put the next student
/* 101*/ 		SearchStuList (start, &pPrev,&pCurrent,tmpName);
/* 102*/ 
/* 103*/ 		//inserts the student and the amount of scores to be input from the txt file
/* 104*/ 		start = InsertStudent(start,pPrev,tmpName, score);
/* 105*/ 	}
/* 106*/ 
/* 107*/ 	//print out the list of students and there scores
/* 108*/ 	PrintList(start);
/* 109*/ 
/* 110*/ 	//return 0 back to show is succeded
/* 111*/ 	return 0;
/* 112*/ }
/* 113*/ 
/* 114*/ //searches through the student list to find where it can be inserted in order
/* 115*/ //*Head: points to the main list
/* 116*/ //**pPrev: double pointer which will be used to locate the spot to insert the student
/* 117*/ //**pCurrent: double pointer which is the current place the function is looking through
/* 118*/ //*name: student name needed to compare to the other student names on the list
/* 119*/ bool SearchStuList (STUDENT *Head, STUDENT **pPrev, STUDENT **pCurrent, char *name )
/* 120*/ {
/* 121*/ 	//set found to false
/* 122*/ 	bool found = 0;
/* 123*/ 
/* 124*/ 	//Reset *pPrev pointer to NULL
/* 125*/ 	*pPrev = NULL;
/* 126*/ 
/* 127*/ 	//Reset *pCurrent to the top of the student list
/* 128*/ 	*pCurrent = Head;
/* 129*/ 
/* 130*/ 	//goes through the student list until it reaches the end of the list or the name is larger than the previous name
/* 131*/ 	while(*pCurrent != NULL && strcmp(name,(*pCurrent)->name) > 0)
/* 132*/ 	{
/* 133*/ 
/* 134*/ 		//set the previous pointer to the current pointer
/* 135*/ 		*pPrev = *pCurrent;
/* 136*/ 
/* 137*/ 		//current pointer goes ahead and goes down the student list
/* 138*/ 		*pCurrent = (*pCurrent)->NextStu;
/* 139*/ 	}
/* 140*/ 
/* 141*/ 	//if both names are the same then it found it and will return true
/* 142*/ 	if (*pCurrent && strcmp(name,(*pCurrent)->name) == 0)
/* 143*/ 
/* 144*/ 		//set found to true since it found the exact same name
/* 145*/ 		found = true;
/* 146*/ 
/* 147*/ 	//returns true or false wheather if found a student(just in case)
/* 148*/ 	return found;
/* 149*/ }
/* 150*/ 
/* 151*/ //Insert the Student data to the main list
/* 152*/ //*Head: points to the main list
/* 153*/ //*pPrev: points to the pointer which will be used to put the student data in
/* 154*/ //*name: student name
/* 155*/ //NumScores: how many scores needed to be implemented
/* 156*/ STUDENT *InsertStudent (STUDENT *Head, STUDENT *pPrev, char *name, int NumScores)
/* 157*/ {
/* 158*/ 	STUDENT *pNew;
/* 159*/ 	int list, InScore;
/* 160*/ 	TEST *pWalk = NULL;
/* 161*/ 
/* 162*/ 	//set up the student structure
/* 163*/ 	pNew = (STUDENT *)malloc(sizeof(STUDENT));
/* 164*/ 
/* 165*/ 	//checks if it succeded 
/* 166*/ 	if(pNew == NULL)
/* 167*/ 	{
/* 168*/ 
/* 169*/ 		//if it fails, there is no memory to hold it
/* 170*/ 		printf("Not enought memory, please free up some and try again");
/* 171*/ 
/* 172*/ 		//closes the program with exit(1)
/* 173*/ 		exit(1);
/* 174*/ 	}
/* 175*/ 
/* 176*/ 	//grabs the student name and put it into the new node
/* 177*/ 	strncpy(pNew->name,name,50);
/* 178*/ 
/* 179*/ 	//set the pointer for the score to null, prevents miss point
/* 180*/ 	pNew->pScore =NULL;
/* 181*/ 
/* 182*/ 	//checks if this is the first student in the list
/* 183*/ 	if (pPrev == NULL)
/* 184*/ 	{
/* 185*/ 		//if it is true, it sets the new pointer to the head
/* 186*/ 		pNew->NextStu = Head;
/* 187*/ 
/* 188*/ 		//Sets the Head to the new node
/* 189*/ 		Head = pNew;
/* 190*/ 	}
/* 191*/ 	else
/* 192*/ 	{
/* 193*/ 		//if its not the first, it will be inserted into the list
/* 194*/ 		//will set the new node to the prevois pointer so it can be inserted between two
/* 195*/ 		pNew->NextStu = pPrev->NextStu;
/* 196*/ 
/* 197*/ 		//set the previous pointer to the new node
/* 198*/ 		pPrev->NextStu = pNew;
/* 199*/ 	}
/* 200*/ 
/* 201*/ 	//Inserts the scores for this individual Student
/* 202*/ 	for(list=0;list<NumScores;list++)
/* 203*/ 	{
/* 204*/ 
/* 205*/ 		//promts the user to input the scores
/* 206*/ 		printf("Please enter score %d for %s:",list+1,name);
/* 207*/ 
/* 208*/ 		//grabs the input data from the user
/* 209*/ 		scanf("%d",&InScore);
/* 210*/ 
/* 211*/ 		//inputs the scores with the InsertScore function
/* 212*/ 		*pWalk = InsertScore(pNew,&pWalk,InScore);
/* 213*/ 	}
/* 214*/ 
/* 215*/ 	//return the Header back to the program
/* 216*/ 	return Head;
/* 217*/ }
/* 218*/ 
/* 219*/ //Insert the scores for each individual students
/* 220*/ //*pNew: points to the individual Student
/* 221*/ //**Current:Is used to progress through the Test Structure
/* 222*/ //InScore: the score data that will be inserted into the Test list
/* 223*/ TEST InsertScore(STUDENT *pNew,TEST **Current, int InScore)
/* 224*/ {
/* 225*/ 	TEST *pNewScore;
/* 226*/ 	
/* 227*/ 	//creates the newscore so it can be implemented
/* 228*/ 	pNewScore = (TEST *)malloc(sizeof(TEST));
/* 229*/ 
/* 230*/ 	//checks if it succeded
/* 231*/ 	if(pNewScore == NULL)
/* 232*/ 	{
/* 233*/ 		//if it fails, means no more memory
/* 234*/ 		printf("Not enought memory, please free up some and try again");
/* 235*/ 
/* 236*/ 		//closes the program with a exit(1)
/* 237*/ 		exit(1);
/* 238*/ 	}
/* 239*/ 
/* 240*/ 	//sets the new nodes data
/* 241*/ 	pNewScore->score = InScore;
/* 242*/ 
/* 243*/ 	//set the new nodes pointer to null
/* 244*/ 	pNewScore->link = NULL;
/* 245*/ 
/* 246*/ 	//check if this is the first score for the student
/* 247*/ 	if (*Current == NULL)
/* 248*/ 	{
/* 249*/ 
/* 250*/ 		//first score, set the students score pointer to the new node
/* 251*/ 		pNew->pScore = pNewScore;
/* 252*/ 
/* 253*/ 		//set the progressor to the next Node, so it can follow through the data nicely
/* 254*/ 		*Current = pNewScore;
/* 255*/ 
/* 256*/ 	}
/* 257*/ 
/* 258*/ 	//if it fails the check, there is already data in it. so it just latches on
/* 259*/ 	else
/* 260*/ 	{
/* 261*/ 
/* 262*/ 		//sets the progressor link to the new score so the score is linked to the list
/* 263*/ 		(*Current)->link = pNewScore;
/* 264*/ 
/* 265*/ 		//progress the current pointer down to the newly implemented node
/* 266*/ 		*Current = pNewScore;
/* 267*/ 				
/* 268*/ 	}
/* 269*/ 
/* 270*/ 	//return the current progressor to the main program
/* 271*/ 	return **Current;
/* 272*/ }
/* 273*/ 
/* 274*/ 
/* 275*/ //Prints out the students and the scores to the screen
/* 276*/ //Head: points to the main List to be printed
/* 277*/ void PrintList(STUDENT *Head)
/* 278*/ {
/* 279*/ 	//Declair a pointer variable to go through the Student Structure 
/* 280*/ 	STUDENT *pWalker;
/* 281*/ 
/* 282*/ 	//Declair a pointer variable to go through each individual score list
/* 283*/ 	TEST *pTWalker;
/* 284*/ 
/* 285*/ 	//count increment that will limit the output to only four times for this program has a limit of four scores
/* 286*/ 	int count;
/* 287*/ 
/* 288*/ 	//adds each score per student to calculate the total and average
/* 289*/ 	float Sum;
/* 290*/ 
/* 291*/ 	//set the pwalker to the top of the student list
/* 292*/ 	pWalker = Head;
/* 293*/ 
/* 294*/ 	//print the header of the list to the consol
/* 295*/ 	printf("\n\n");
/* 296*/ 	printf("+=====================+========+========+========+========+=========+=========+\n");
/* 297*/ 	printf("| Student Names       |  Sc 1  |  Sc 2  |  Sc 3  |  Sc 4  |  total  |   Avg   |\n");
/* 298*/ 	printf("|---------------------|--------|--------|--------|--------|---------|---------|\n");
/* 299*/ 
/* 300*/ 	//checks through the student list until pwalker becomes a null and end's the printing the list
/* 301*/ 	while (pWalker)
/* 302*/ 	{
/* 303*/ 		//print only 19 lines for the name
/* 304*/ 		printf("| %-19s |",pWalker->name);
/* 305*/ 
/* 306*/ 		//sets the scores walker so it can go down the individual student scores
/* 307*/ 		pTWalker = pWalker->pScore;
/* 308*/ 
/* 309*/ 		//reset sum
/* 310*/ 		Sum = 0;
/* 311*/ 
/* 312*/ 		//reset count
/* 313*/ 		count = 0;
/* 314*/ 
/* 315*/ 		//checks through the scores list and prints them until the score walker is null or count hits 4
/* 316*/ 		while (pTWalker != NULL && count <4)
/* 317*/ 		{
/* 318*/ 			//prints out the scores
/* 319*/ 			printf("  %4d  |",pTWalker->score);
/* 320*/ 
/* 321*/ 			//adds the scores together
/* 322*/ 			Sum = Sum + (float)pTWalker->score;
/* 323*/ 
/* 324*/ 			//goes down the list in the score
/* 325*/ 			pTWalker = pTWalker->link;
/* 326*/ 
/* 327*/ 			//add to count
/* 328*/ 			count++;
/* 329*/ 		}
/* 330*/ 
/* 331*/ 		//when there is no more scores, and less than 4, it will print out white space
/* 332*/ 		while(count<4)
/* 333*/ 		{
/* 334*/ 			
/* 335*/ 			//print out white space
/* 336*/ 			printf(" - -- - |");
/* 337*/ 			
/* 338*/ 			//add to count
/* 339*/ 			count++;
/* 340*/ 		}
/* 341*/ 
/* 342*/ 		//prints out the total and the average of each individual students scores
/* 343*/ 		printf(" %7.2f | %7.2f |\n",Sum, Sum/count);
/* 344*/ 
/* 345*/ 		//goes to the next student down the list
/* 346*/ 		pWalker = pWalker->NextStu;
/* 347*/ 	}
/* 348*/ 
/* 349*/ 	//footer of the list to be printed out to the consol
/* 350*/ 	printf("+=====================+========+========+========+========+=========+=========+\n");
/* 351*/ 	printf("\n\n");
/* 352*/ 
/* 353*/ }
/* 354*/ //end of program
/* 355*/ //sooo long, finally done with comments
/* 356*/ //if only it was 2 hours earlier XD
** compiled *********************************************************
ece161lab8.cpp
Microsoft (R) Incremental Linker Version 10.00.40219.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:C:\Users\David\Dropbox\David-Steve\Grading\ece161lab1\LAB8\dnoyes.exe 
ece161lab8.obj 


********** console output **********
Please enter score 1 for Einstein,Albert:Please enter score 2 for Einstein,Albert:Please enter score 3 for Einstein,Albert:Please enter score 1 for Abrew,Steve:Please enter score 2 for Abrew,Steve:Please enter score 3 for Abrew,Steve:Please enter score 4 for Abrew,Steve:Please enter score 1 for Light,Dave:Please enter score 2 for Light,Dave:Please enter score 3 for Light,Dave:Please enter score 4 for Light,Dave:Please enter score 1 for Trapp,Sarah:Please enter score 2 for Trapp,Sarah:Please enter score 3 for Trapp,Sarah:Please enter score 1 for Walljasper,Chris:Please enter score 2 for Walljasper,Chris:Please enter score 3 for Walljasper,Chris:Please enter score 4 for Walljasper,Chris:Please enter score 1 for Albert,Fred:Please enter score 2 for Albert,Fred:Please enter score 1 for Rice,Leo:Please enter score 1 for Dupre,Frances:Please enter score 2 for Dupre,Frances:Please enter score 3 for Dupre,Frances:Please enter score 1 for Brown,Steven:Please enter score 2 for Brown,Steven:Please enter score 3 for Brown,Steven:Please enter score 4 for Brown,Steven:Please enter score 1 for Prairie,David:Please enter score 2 for Prairie,David:

+=====================+========+========+========+========+=========+=========+
| Student Names       |  Sc 1  |  Sc 2  |  Sc 3  |  Sc 4  |  total  |   Avg   |
|---------------------|--------|--------|--------|--------|---------|---------|
| Abrew,Steve         |   100  |    25  |     0  |    80  |  205.00 |   51.25 |
| Albert,Fred         |    30  |   100  | - -- - | - -- - |  130.00 |   32.50 |
| Brown,Steven        |    90  |   100  |    50  |   100  |  340.00 |   85.00 |
| Dupre,Frances       |    85  |    85  |    95  | - -- - |  265.00 |   66.25 |
| Einstein,Albert     |    90  |    80  |    75  | - -- - |  245.00 |   61.25 |
| Light,Dave          |    90  |    95  |    97  |    89  |  371.00 |   92.75 |
| Prairie,David       |     0  |    78  | - -- - | - -- - |   78.00 |   19.50 |
| Rice,Leo            |    70  | - -- - | - -- - | - -- - |   70.00 |   17.50 |
| Trapp,Sarah         |    76  |    50  |    96  | - -- - |  222.00 |   55.50 |
| Walljasper,Chris    |    76  |    90  |    98  |   100  |  364.00 |   91.00 |
+=====================+========+========+========+========+=========+=========+




